/**
 * Script pour tester toutes les fonctionnalit√©s du panel admin
 */

const API_URL = 'https://calitekv3.calitek-junior.workers.dev'

async function testAdminPanel() {
  console.log('üß™ Test complet du panel admin...')
  
  try {
    // 1. Test des cat√©gories
    console.log('\nüìÅ Test des cat√©gories...')
    const categoriesResponse = await fetch(`${API_URL}/api/categories`)
    const categories = await categoriesResponse.json()
    console.log(`‚úÖ ${categories.length} cat√©gories trouv√©es`)
    
    // Cr√©er une cat√©gorie de test
    const testCategory = {
      id: 'test-cat-' + Date.now(),
      name: 'Test Cat√©gorie Admin',
      icon: 'üß™',
      description: 'Cat√©gorie cr√©√©e via panel admin'
    }
    
    const createCategoryResponse = await fetch(`${API_URL}/api/categories`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testCategory)
    })
    const createCategoryResult = await createCategoryResponse.json()
    console.log('‚úÖ Cat√©gorie cr√©√©e:', createCategoryResult)
    
    // 2. Test des farms
    console.log('\nüåæ Test des farms...')
    const farmsResponse = await fetch(`${API_URL}/api/farms`)
    const farms = await farmsResponse.json()
    console.log(`‚úÖ ${farms.length} farms trouv√©es`)
    
    // Cr√©er une farm de test
    const testFarm = {
      id: 'test-farm-' + Date.now(),
      name: 'Test Farm Admin',
      description: 'Farm cr√©√©e via panel admin'
    }
    
    const createFarmResponse = await fetch(`${API_URL}/api/farms`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testFarm)
    })
    const createFarmResult = await createFarmResponse.json()
    console.log('‚úÖ Farm cr√©√©e:', createFarmResult)
    
    // 3. Test des produits
    console.log('\nüì¶ Test des produits...')
    const productsResponse = await fetch(`${API_URL}/api/products`)
    const products = await productsResponse.json()
    console.log(`‚úÖ ${products.length} produits trouv√©s`)
    
    // Cr√©er un produit de test
    const testProduct = {
      id: 'test-prod-' + Date.now(),
      name: 'Produit Test Admin',
      description: 'Produit cr√©√© via panel admin',
      category: testCategory.id,
      farm: testFarm.id,
      variants: [
        { name: 'Test 5g', price: '50‚Ç¨' },
        { name: 'Test 10g', price: '90‚Ç¨' }
      ],
      price: '50‚Ç¨'
    }
    
    const createProductResponse = await fetch(`${API_URL}/api/products`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testProduct)
    })
    const createProductResult = await createProductResponse.json()
    console.log('‚úÖ Produit cr√©√©:', createProductResult)
    
    // 4. Test des settings
    console.log('\n‚öôÔ∏è Test des settings...')
    const settingsResponse = await fetch(`${API_URL}/api/settings`)
    const settings = await settingsResponse.json()
    console.log('‚úÖ Settings r√©cup√©r√©s:', Object.keys(settings))
    
    // 5. Test des r√©seaux sociaux
    console.log('\nüì± Test des r√©seaux sociaux...')
    const socialsResponse = await fetch(`${API_URL}/api/socials`)
    const socials = await socialsResponse.json()
    console.log(`‚úÖ ${socials.length} r√©seaux sociaux trouv√©s`)
    
    // 6. Nettoyage - Supprimer les √©l√©ments de test
    console.log('\nüßπ Nettoyage des √©l√©ments de test...')
    
    await fetch(`${API_URL}/api/products/${testProduct.id}`, { method: 'DELETE' })
    console.log('‚úÖ Produit de test supprim√©')
    
    await fetch(`${API_URL}/api/categories/${testCategory.id}`, { method: 'DELETE' })
    console.log('‚úÖ Cat√©gorie de test supprim√©e')
    
    await fetch(`${API_URL}/api/farms/${testFarm.id}`, { method: 'DELETE' })
    console.log('‚úÖ Farm de test supprim√©e')
    
    console.log('\nüéâ Tous les tests du panel admin ont r√©ussi !')
    console.log('\nüìä R√©sum√©:')
    console.log(`- ${categories.length} cat√©gories`)
    console.log(`- ${farms.length} farms`)
    console.log(`- ${products.length} produits`)
    console.log(`- ${socials.length} r√©seaux sociaux`)
    console.log('- Settings configur√©s')
    console.log('\n‚úÖ Le panel admin est enti√®rement fonctionnel !')
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
  }
}

// Ex√©cuter le test
testAdminPanel()